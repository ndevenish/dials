language: cpp
os:
  - linux
  - osx

# Don't build the travis branch
branches:
  except:
    - travis

addons:
  apt:
    packages: 
      - libhdf5-dev
      - libeigen3-dev
      - libtiff5-dev
      - libboost-python-dev
cache:
  directories:
    - ${TRAVIS_BUILD_DIR}/deps/cmake # If microsoft/GSL decided this was a good idea...
    - ${TRAVIS_BUILD_DIR}/build # Cache the whole build directory for incremental builds
before_install:
  - python --version
  - if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then brew update > /dev/null; fi
install:
  # Install/upgrade homebrew dependencies; [pcre libtiff] exist already
  - |
    if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then
      for package in hdf5 boost-python cmake eigen; do
        if brew ls --versions $package > /dev/null; then
          brew outdated $package || brew upgrade $package
        else
          brew install $package
        fi
      done
      # We want special options for this one so custom install
      brew install findutils --with-default-names
    fi
  - DEPS_DIR="${TRAVIS_BUILD_DIR}/deps"
  # Good enough for microsoft: Install a recent CMake, or use a cached version
  - mkdir -p "${DEPS_DIR}" && cd "${DEPS_DIR}"
  - |
    if [[ "${TRAVIS_OS_NAME}" == "linux" ]]; then
      if [[ -z "$(ls -A ${DEPS_DIR}/cmake/bin)" ]]; then
        CMAKE_URL="https://cmake.org/files/v3.9/cmake-3.9.0-Linux-x86_64.tar.gz"
        mkdir -p cmake && travis_retry wget --no-check-certificate --quiet -O - "${CMAKE_URL}" | tar --strip-components=1 -xz -C cmake
      fi
      export PATH="${DEPS_DIR}/cmake/bin:${PATH}"
    else
      if ! brew ls --version cmake &>/dev/null; then brew install cmake; fi
    fi
  - cmake --version | head -n1
  - pip install mock docopt pathlib2 enum34 pyyaml

before_script:
  - cd ${TRAVIS_BUILD_DIR}
# Move the current repository into a dials subdirectory
  - mkdir dials
  - mv {*,.*} dials | true
  - mv dials/deps .
  - git clone https://github.com/ndevenish/autobuild.git cmake
  # Ensure we have the latest CMakeLists - regenerate them. This is required 
  # whilst the cmake system is in heavy flux.
  - |
    cd cmake
    ./do_autogen.sh
    cd ..
    mv cmake/prepare_singlemodule.py .
  # Get all the other modules we need to compile
  - python prepare_singlemodule.py --write-log
  #Â Handle timestamp updating from the cache. Since travis gives a fresh checkout
  # every time, all files in the repository will be newer than the build cache dates,
  # and so everything will be rebuilt anyway. This backdates things that haven't changed.
  - | 
    if [[ -f build/commit_ids.txt ]]; then
      # Use the old module list; any new modules won't need to be touched anyway
      MODULES=$(cat build/commit_ids.txt | awk '{ print $1; }')
      # Find the oldest time in the build directory
      OLDEST_MTIME=$(find . -type f -printf "%.10T@\n" | sort | head -n 1)
      echo "Backdating to $(date -r $OLDEST_MTIME)"

      # Change the mtime of ALL checked out files to match this
      for repo in $MODULES; do
        echo "  Handling cache backdate for $repo"
        # Find the old commit and if it exists in the repository, we can backdate
        OLDREV=$(cat commit_ids.txt | grep "${repo} " | awk '{ print $2; }')
        if git cat-file -t $OLDREV; then
          # The commit exists. Backdate everything...
          find $repo | xargs touch -t $(date -r $OLDEST_MTIME +%Y%m%d%H%M.%S)
          # And then forward-date everything that has changed
          git diff --name-only | xargs touch -c
        else
          echo "  Commit $OLDREV does not exist in repository; not backdating"
        fi
      done
    else
      echo "No build/commit_ids.txt; Not syncing timestamps"
    fi
    # Finally, replace the old commit id file
    mkdir -p build
    mv commit_ids.txt build/
  # Do the actual building
  - mkdir build
  - cd build
  - cmake ..

script:
  - make -j 2

