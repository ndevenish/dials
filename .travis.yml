language: cpp
os:
  - linux
  - osx

env:
  - BOOST_VERSION=1.63.0
  - BOOST_VERSION=1.65.1

matrix:
  allow_failures:
    - env: BOOST_VERSION=1.65.1

# Don't build the travis branch
branches:
  except:
    - travis

addons:
  apt:
    packages:
      - libhdf5-dev
      - libeigen3-dev
      - libtiff5-dev
cache:
  directories:
    - ${TRAVIS_BUILD_DIR}/build # Cache the whole build directory for incremental builds
    - ${TRAVIS_BUILD_DIR}/deps # Other dependencies like boost, cmake will be installed here

before_install:
  # Rewrite the path on OSX so that we use the homebrew, rather than system, python
  - |
    if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then
      export PATH="/usr/local/opt/python/libexec/bin:$PATH"
    fi
  - python --version
  - |
    if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then # Update homebrew
      HOMEBREW_NO_AUTO_UPDATE=1 brew info cmake eigen hdf5 findutils
      brew update > /dev/null;
      export HOMEBREW_NO_AUTO_UPDATE=1
    fi

install:
  ############################################################################
  # All the dependencies are installed in ${TRAVIS_BUILD_DIR}/deps/
  ############################################################################
  - DEPS_DIR="${TRAVIS_BUILD_DIR}/deps"
  - mkdir -p ${DEPS_DIR} && cd ${DEPS_DIR}

  ############################################################################
  # Setup default versions and override compiler if needed
  ############################################################################
  - if [[ "${BOOST_VERSION}" == "default" ]]; then BOOST_VERSION=1.63.0; fi

  # Install/upgrade homebrew dependencies; [pcre libtiff] exist already
  - |
    brew cask uninstall oclint || true # Fix bug where this overwrites poured links
    if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then # Do OSX brew dependencies
      for package in hdf5 cmake eigen sccache; do
        if brew ls --versions $package > /dev/null; then
          brew outdated $package || brew upgrade $package
        else
          brew install $package
        fi
      done
      # We want special options for this one so custom install
      brew install findutils --with-default-names
    fi

  # Other python libs we know about - need numpy before boost is built
  - pip install --user mock docopt pathlib2 enum34 pyyaml ninja numpy

  ############################################################################
  # Build/Install specified boost version with boost-python
  ############################################################################
  - |
    if [[ "${BOOST_VERSION}" != "" ]]; then # Install requested boost version
      BOOST_DIR=${DEPS_DIR}/boost-${BOOST_VERSION}
      BOOST_BUILD_DIR=~/build_tmp/boost
      if [[ -z "$(ls -A ${BOOST_DIR} 2>/dev/null)" ]]; then
        if [[ "${BOOST_VERSION}" == "trunk" ]]; then
          BOOST_URL="http://github.com/boostorg/boost.git"
          travis_retry git clone --depth 1 --recursive ${BOOST_URL} ${BOOST_BUILD_DIR} || exit 1
        else
          BOOST_URL="http://sourceforge.net/projects/boost/files/boost/${BOOST_VERSION}/boost_${BOOST_VERSION//\./_}.tar.gz"
          mkdir -p ${BOOST_BUILD_DIR}
          { travis_retry wget -O - ${BOOST_URL} | tar --strip-components=1 -xz -C ${BOOST_BUILD_DIR}; } || exit 1
        fi
        mkdir -p ${BOOST_DIR}
        (cd ${BOOST_BUILD_DIR} && ./bootstrap.sh && ./b2 -j 3 -d0 --prefix=${BOOST_DIR} --with-python install) || exit 1
      fi
      CMAKE_OPTIONS+=" -DBOOST_ROOT=${BOOST_DIR}"
    fi

  ############################################################################
  # Install a recent CMake
  ############################################################################
  - |
    if [[ "${TRAVIS_OS_NAME}" == "linux" ]]; then # Install/upgrade cmake
      CMAKE_MAJOR=3.10
      CMAKE_POINT_RELEASE=3.10.0
      # If the path for cmake exists, check if it is the right version
      if [[ -n "$(ls -A ${DEPS_DIR}/cmake/bin 2>/dev/null)" ]]; then
        if [[ $(cmake/bin/cmake --version | head -n1 | awk '{ print $3; }') != "${CMAKE_POINT_RELEASE}" ]]; then
          echo "CMake out of date. Removing so we can recreate."
          rm -rf cmake
        fi
      fi
      # If the path doesn't exist, then download cmake
      if [[ -z "$(ls -A ${DEPS_DIR}/cmake/bin 2>/dev/null)" ]]; then
        CMAKE_URL="https://cmake.org/files/v${CMAKE_MAJOR}/cmake-${CMAKE_POINT_RELEASE}-Linux-x86_64.tar.gz"
        mkdir -p cmake && travis_retry wget --no-check-certificate --quiet -O - "${CMAKE_URL}" | tar --strip-components=1 -xz -C cmake
      fi
      export PATH="${DEPS_DIR}/cmake/bin:${PATH}"
    else
      if ! brew ls --version cmake &>/dev/null; then brew install cmake; fi
    fi

  - cmake --version | head -n1


  # On OSX, make sure that the --user pip is on the path
  - |
    if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then # Update PATH for pip --user
      export PATH=$(python -c "import site, os; print(os.path.join(site.USER_BASE, 'bin'))"):$PATH
    fi

before_script:
  - cd ${TRAVIS_BUILD_DIR}
  # Move the current repository into a dials subdirectory
  - mkdir dials && mv $(git ls-tree --name-only HEAD) dials && mv .git dials/
  # Verify what our folder looks like
  - ls
  # Grab the autobuild repository
  - git clone https://github.com/ndevenish/autobuild.git cmake
  # Install the scons conversion repository
  - pip install --user git+https://github.com/ndevenish/tbxtools.git
  # Get all the other modules we need to compile
  - python cmake/prepare_singlemodule.py --write-log --no-cmake

  # Generate the CMakelists
  - tbx2cmake . .
  - cp cmake/RootCMakeLists.txt CMakeLists.txt

  # IF we have no cache, then we want to use sccache to build - this means that
  # we can survive over extra terminations (on OSX)
  - |
    if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then
      if [[ ! -f build/commit_ids.txt ]]; then
        echo "FIRST CACHE BUILD: USING S3"
        export USE_SCCACHE=1
        export CXX="sccache c++"
        export CC="sccache cc"

        export SCCACHE_BUCKET=ndtraviscache
        sccache --start-server
      fi
    fi

  # Handle timestamp updating from the cache. Since travis gives a fresh checkout
  # every time, all files in the repository will be newer than the build cache dates,
  # and so everything will be rebuilt anyway. This backdates things that haven't changed.
  - |
    if [[ -f build/commit_ids.txt ]]; then # Update build cache timestamps
      # Use the old module list; any new modules won't need to be touched anyway
      MODULES=$(cat build/commit_ids.txt | awk '{ print $1; }')
      # Find the oldest time in the build directory
      echo "Oldest time: "
      find -type f -printf '%T+ %p\n' | sort | head -n 1

      OLDEST_MTIME=$(find . -type f -printf "%.10T@\n" | sort | head -n 1)
      if [[ "${TRAVIS_OS_NAME}" == "linux" ]]; then
        echo "Backdating to $(date -d @$OLDEST_MTIME)"
        OLDEST_TS=$(date -d @$OLDEST_MTIME +%Y%m%d%H%M.%S)
      else
        echo "Backdating to $(date -r $OLDEST_MTIME)"
        OLDEST_TS=$(date -r $OLDEST_MTIME +%Y%m%d%H%M.%S)
      fi

      # Change the mtime of ALL checked out files to match this
      for repo in $MODULES; do
        echo "  Handling cache backdate for $repo"
        # Find the old commit and if it exists in the repository, we can backdate
        OLDREV=$(cat commit_ids.txt | grep "${repo} " | awk '{ print $2; }')
        if GIT_DIR=$repo/.git git cat-file -e $OLDREV; then
          # The commit exists. Backdate everything...
          find $repo | xargs touch -t $OLDEST_TS
          # And then forward-date everything that has changed
          GIT_DIR=$repo/.git git diff --name-only | xargs touch -c
        else
          echo "  Commit $OLDREV does not exist in repository; not backdating"
        fi
      done
    else
      echo "No build/commit_ids.txt; Not syncing timestamps"
    fi
    # Finally, replace the old commit id file
    mkdir -p build
    mv commit_ids.txt build/


  # Do the actual building
  - mkdir -p build
  - cd build

script:
  - cmake .. ${CMAKE_OPTIONS}
  - make -j 3
  - |
    if [[ -n $USE_SCCACHE ]]; then
      sccache -s
      sccache --stop-server
    fi

